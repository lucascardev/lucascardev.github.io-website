{"version":3,"sources":["style/global.js","services/api.js","App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","PageHolder","Header","Avatar","img","Contact","Username","h1","Main","Footer","API","Axios","create","baseURL","App","useState","avatarimg","setAvatarimg","username","setUsername","useEffect","a","get","response","data","avatar_url","login","getmyprofile","src","href","alt","size","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.25c328d3.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\n\r\nexport const Container = styled.div`\r\ndisplay: flex;\r\nflex-direction: column;\r\n`;\r\n\r\nexport const PageHolder = styled.div`\r\nmargin-top: 32px;\r\npadding: 32px;\r\n`;\r\n\r\nexport const Header = styled.div`\r\nbackground-color: cadetblue;\r\ndisplay: flex;\r\nflex-direction: row;\r\n/* position: absolute; */\r\ntop: 0;\r\npadding: 16px;\r\njustify-content: space-between;\r\n`;\r\n\r\nexport const Avatar = styled.img`\r\n\r\n@media only screen and (max-width: 600px) {\r\n    width: 30px;\r\n    height: 30px;\r\n  }\r\nwidth: 60px;\r\nheight: 60px;\r\nborder-radius: 50%;\r\n`;\r\n\r\nexport const Contact = styled.div`\r\n align-self: center;\r\n justify-content: flex-end;\r\np{\r\n    font-size: 16px;\r\n    color: whitesmoke;\r\n    align-self: center;\r\n}\r\n`;\r\n\r\nexport const Username = styled.h1`\r\ncolor: #ff742b; \r\nalign-self: center;\r\npadding: 20px;\r\na{\r\n    color: whitesmoke;\r\n    transition: color 0.2s;\r\n}\r\na:hover{\r\n    color: #ff742b; \r\n}\r\n`;\r\n\r\nexport const Main = styled.div`\r\npadding: 32px;\r\nbackground-color: cadetblue;\r\ncolor: whitesmoke;\r\nborder-radius: 3px;\r\nh1 {\r\n    \r\n}\r\np {\r\n    margin-top: 16px;\r\n    margin-bottom: 16px;\r\n\r\n}\r\n.linkholder {\r\n    display: flex;\r\n    flex-direction: row;\r\n    a{ \r\n    color: #ff742b;\r\n    margin-left: 10px;\r\n    margin-right: 10px;\r\n    transition: color 0.2s;\r\n}\r\na:hover{\r\n    color: whitesmoke; \r\n}\r\n}\r\n\r\n`;\r\n\r\nexport const Footer = styled.div`\r\nbackground-color: cadetblue;\r\nposition: absolute;\r\ndisplay: flex;\r\nflex-direction: row;\r\n/* position: absolute; */\r\nbottom: 0;\r\nwidth: 100%;\r\npadding: 16px;\r\njustify-content: space-between;\r\np {\r\n    color: whitesmoke;\r\n    a{\r\n        color: #ff742b;\r\n    }\r\n}\r\n`;\r\n\r\n","import Axios from 'axios';\r\n\r\nconst API = Axios.create({  \r\n    baseURL: 'https://api.github.com/' \r\n});\r\n\r\nexport default API;\r\n","import React, { useEffect, useState } from \"react\";\n\nimport { FaWineBottle, FaWineGlass, FaGithub, FaInstagram, FaHome, FaLinkedin, FaTooth } from 'react-icons/fa';\n\nimport { Container, Header, Avatar, Username, Main, Contact, Footer, PageHolder } from \"./style/global\";\n\nimport API from './services/api'\n\nfunction App() {\n  const [avatarimg, setAvatarimg] = useState('');\n  const [username, setUsername] = useState('');\n  \n\n  useEffect(() => {\n    async function  getmyprofile() {\n      const response = await API.get( \"users/lucascardev\" );\n      // console.log(response);\n      setAvatarimg(response.data.avatar_url);\n      setUsername(response.data.login);\n    };\n    getmyprofile();\n  }, [])\n\n  return (\n    <Container>\n      <Header>\n      <Avatar src={avatarimg} />\n      <Username >@<a href=\"https://github.com/lucascardev\" alt=\"Github profile\" >{username}</a></Username>\n      <Contact>\n       <p><b>Phonenumber: </b>+5571992931330</p>\n        <p><b>Email: </b>lucasmatheussc97@gmail.com</p>\n      </Contact>\n      </Header>\n    <PageHolder>\n      <Main>\n        <h1 > Hello there i'm Lucas, lets take a <FaWineBottle size={35} /> <FaWineGlass size={15}  /> some time. </h1>\n           <p> Keep contact with me on fallowing my social media </p>\n           \n           <div className='linkholder' >\n           <a href='https://www.instagram.com/lucas_mtheus/' ><FaInstagram  size={55} /></a> <a href='https://github.com/lucascardev'><FaGithub  size={55} /></a> <a href='https://lightupweb.mailchimpsites.com/' ><FaHome size={55}/></a> <a href='https://www.linkedin.com/in/lucas-matheus-s-cardoso-266884169/'><FaLinkedin size={55} /></a>\n           </div>\n          \n           <p> Im also a dentistry student, at 6 period... Half of way... </p>\n           <div className='linkholder' >\n           <a href='https://www.instagram.com/odontosemcomplicacao/' ><FaTooth  size={55} /></a> \n           </div>\n      </Main>\n    </PageHolder>\n\n    <Footer>\n       <p>This page was build using the <a href=\"https://pages.github.com/\"><b>GitHub Pages</b></a> an excelent frontend server and a react aplication...</p>\n    </Footer>\n  </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/global.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}